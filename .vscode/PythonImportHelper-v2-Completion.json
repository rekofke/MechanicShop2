[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def create_customer():\n    try:\n        customer_data = customer_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(Customer).where(Customer.email == customer_data[\"email\"])\n    customer = db.session.execute(query).scalars().first()\n    if customer:  # returns True and access if-block\n        return jsonify({\"error\": \"email already associated with another account\"}), 400\n    new_customer = Customer(**customer_data)",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customers",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customers():\n    query = select(Customer)\n    customers = db.session.execute(query).scalars().all()\n    return customers_schema.jsonify(customers)\n# Get a customer\n@customers_bp.route('/<int:customer_id>', methods=['GET'])\ndef get_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if customer:\n        return customer_schema.jsonify(customer), 200",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if customer:\n        return customer_schema.jsonify(customer), 200\n    return jsonify({\"error\": \"Invalid customer ID\"}), 400\n# Update a customer\n@customers_bp.route('/<int:customer_id>', methods=['PUT'])\ndef update_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if not customer:",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "update_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def update_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if not customer:\n        return jsonify({\"error\": \"Invalid customer ID\"}), 400\n    try:\n        customer_data = customer_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # Check if the email already exists for another customer\n    query = select(Customer).where(Customer.email == customer_data[\"email\"])",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "delete_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def delete_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if not customer:\n        return jsonify({\"error\": \"Invalid customer ID\"}), 400\n    db.session.delete(customer)\n    db.session.commit()\n    return jsonify({\"message\": \"Customer deleted successfully\"}), 200",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "CustomerSchema",
        "kind": 6,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "class CustomerSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Customer\ncustomer_schema = CustomerSchema()\ncustomers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customer_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customer_schema = CustomerSchema()\ncustomers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customers_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "create_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def create_mechanic():\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(Mechanic).where(Mechanic.email == mechanic_data[\"email\"])\n    mechanic = db.session.execute(query).scalars().first()\n    if mechanic:  # returns True and access if-block\n        return jsonify({\"error\": \"email already associated with another account\"}), 400\n    new_mechanic = Mechanic(**mechanic_data)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanics():\n    query = select(Mechanic)\n    mechanics = db.session.execute(query).scalars().all()\n    return mechanics_schema.jsonify(mechanics)\n# Get a mechanic\n@mechanics_bp.route('/<int:mechanic_id>', methods=['GET'])\ndef get_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if mechanic:\n        return mechanic_schema.jsonify(mechanic), 200",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if mechanic:\n        return mechanic_schema.jsonify(mechanic), 200\n    return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n# Update a mechanic\n@mechanics_bp.route('/<int:mechanic_id>', methods=['PUT'])\ndef update_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if not mechanic:",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "update_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def update_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # Check if the email already exists for another mechanic\n    query = select(Mechanic).where(Mechanic.email == mechanic_data[\"email\"])",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "delete_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def delete_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n    db.session.delete(mechanic)\n    db.session.commit()\n    return jsonify({\"message\": \"mechanic deleted successfully\"}), 200",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "MechanicSchema",
        "kind": 6,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "class MechanicSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanic\nmechanic_schema = MechanicSchema()\nmechanics_schema = MechanicSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanic_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanic_schema = MechanicSchema()\nmechanics_schema = MechanicSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanics_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanics_schema = MechanicSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "create_ServiceTicket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def create_ServiceTicket():\n    try:\n        service_ticket_data = service_ticket_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    customer = db.session.get(Customer, service_ticket_data.get(\"customer_id\"))\n    if not customer:\n        return jsonify({\"error\": \"Invalid customer ID\"}), 400\n    query = select(ServiceTicket).where(\n        (ServiceTicket.VIN == service_ticket_data[\"VIN\"]) &",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_service_tickets",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def get_service_tickets():\n    query = select(ServiceTicket)\n    service_tickets = db.session.execute(query).scalars().all()\n    return service_tickets_schema.jsonify(service_tickets)\n# Get a service_ticket\n@service_tickets_bp.route('/<int:service_ticket_id>', methods=['GET'])\ndef get_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if service_ticket:\n        return service_ticket_schema.jsonify(service_ticket), 200",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def get_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if service_ticket:\n        return service_ticket_schema.jsonify(service_ticket), 200\n    return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n# Update a service_ticket\n@service_tickets_bp.route('/<int:service_ticket_id>', methods=['PUT'])\ndef update_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if not service_ticket:",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "update_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def update_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if not service_ticket:\n        return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n    try:\n        service_ticket_data = service_ticket_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(ServiceTicket).where(\n        (ServiceTicket.VIN == service_ticket_data[\"VIN\"]) &",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "delete_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def delete_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if not service_ticket:\n        return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n    db.session.delete(service_ticket)\n    db.session.commit()\n    return jsonify({\"message\": \"service_ticket deleted successfully\"}), 200",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "ServiceTicketSchema",
        "kind": 6,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "class ServiceTicketSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ServiceTicket\n        include_fk = True\nservice_ticket_schema = ServiceTicketSchema()\nservice_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "service_ticket_schema",
        "kind": 5,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "service_ticket_schema = ServiceTicketSchema()\nservice_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "service_tickets_schema",
        "kind": 5,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "service_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "ma = Marshmallow()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\ndb = SQLAlchemy(model_class=Base)\nservice_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Customer(Base):\n    __tablename__ = \"customers\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(320), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(16), nullable=False)\n    tickets: Mapped[List[\"ServiceTicket\"]] = db.relationship(back_populates=\"customer\")\nclass Mechanic(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Mechanic(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(320), nullable=False, unique=True)\n    salary: Mapped[float] = mapped_column(db.Float(), nullable=False)\n    tickets: Mapped[List[\"ServiceTicket\"]] = db.relationship(secondary=service_mechanic, back_populates=\"mechanics\")\nclass ServiceTicket(Base):\n    __tablename__ = \"service_tickets\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ServiceTicket(Base):\n    __tablename__ = \"service_tickets\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    service_date: Mapped[date]\n    VIN: Mapped[str] = mapped_column(db.String(17), nullable=False)\n    service_desc: Mapped[str] = mapped_column(db.String(500), nullable=False)\n    customer_id: Mapped[int] = mapped_column(db.ForeignKey(\"customers.id\"), nullable=False)\n    customer: Mapped[\"Customer\"] = db.relationship(back_populates=\"tickets\")\n    mechanics: Mapped[List[\"Mechanic\"]] = db.relationship(secondary=service_mechanic, back_populates=\"tickets\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "db = SQLAlchemy(model_class=Base)\nservice_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------\nclass Customer(Base):\n    __tablename__ = \"customers\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "service_mechanic",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "service_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------\nclass Customer(Base):\n    __tablename__ = \"customers\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = create_app('DevelopmentConfig')\nwith app.app_context():\n    # db.drop_all()\n    db.create_all()\nif __name__ == '__main__':\n    app.run()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig:\n    SQLALCHEMY_DATBASE_URI = 'sqlite:///app.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = True\nclass TestingConfig:\n    pass\nclass ProductionConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class TestingConfig:\n    pass\nclass ProductionConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ProductionConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    }
]