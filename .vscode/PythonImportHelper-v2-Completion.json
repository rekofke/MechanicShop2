[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "token_required",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "token_required",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "isExtraImport": true,
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "jose",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jose",
        "description": "jose",
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "part_descriptions_bp",
        "importPath": "app.blueprints.part_descriptions",
        "description": "app.blueprints.part_descriptions",
        "isExtraImport": true,
        "detail": "app.blueprints.part_descriptions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "mechanic_schema",
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanics_schema",
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_part_schema",
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_parts_schema",
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_part_schema",
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_part_schema",
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_parts_schema",
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "isExtraImport": true,
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "flask_limiter",
        "description": "flask_limiter",
        "isExtraImport": true,
        "detail": "flask_limiter",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "flask_limiter.util",
        "description": "flask_limiter.util",
        "isExtraImport": true,
        "detail": "flask_limiter.util",
        "documentation": {}
    },
    {
        "label": "Cache",
        "importPath": "flask_caching",
        "description": "flask_caching",
        "isExtraImport": true,
        "detail": "flask_caching",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def create_customer():\n    try:\n        customer_data = customer_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(Customer).where(Customer.email == customer_data[\"email\"])\n    customer = db.session.execute(query).scalars().first()\n    if customer:  # returns True and access if-block\n        return jsonify({\"error\": \"email already associated with another account\"}), 400\n    new_customer = Customer(**customer_data)",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customers",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customers():\n    try:\n        page = int(request.args.get('page'))\n        per_page = int(request.args.get('per_page'))\n        query = select(Customer)\n        customers = db.paginate(query, page=page, per_page=per_page)\n        return customers_schema.jsonify(customers), 200\n    except:\n        query = select(Customer)\n    customers = db.session.execute(query).scalars().all()",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if customer:\n        return customer_schema.jsonify(customer), 200\n    return jsonify({\"error\": \"Invalid customer ID\"}), 400\n# Update a customer\n@customers_bp.route('/<int:customer_id>', methods=['PUT'])\n@limiter.limit(\"5/hour\")\ndef update_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "update_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def update_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if not customer:\n        return jsonify({\"error\": \"Invalid customer ID\"}), 400\n    try:\n        customer_data = customer_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # Check if the email already exists for another customer\n    query = select(Customer).where(Customer.email == customer_data[\"email\"])",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "delete_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def delete_customer(customer_id):\n    customer = db.session.get(Customer, customer_id)\n    if not customer:\n        return jsonify({\"error\": \"Invalid customer ID\"}), 400\n    db.session.delete(customer)\n    db.session.commit()\n    return jsonify({\"message\": \"Customer deleted successfully\"}), 200\n# Path query to find most valuable customer\n@customers_bp.route('/most-valuable', methods=['GET'])\ndef get_most_valuable():",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_most_valuable",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_most_valuable():\n    # return list of customers with the most service tickets\n    query = select(Customer)\n    customers = db.session.execute(query).scalars().all()\n    customers.sort(key=lambda customer: len(customer.tickets),reverse=True)\n    return customers_schema.jsonify(customers), 200  \n# Query parameter to search customer by email\n@customers_bp.route('/search', methods=['GET'])\ndef search_customer():\n    email = request.args.get('email')",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "search_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def search_customer():\n    email = request.args.get('email')\n    #* search for exact email\n    # query = select(Customer).where(Customer.email == email)\n    #* search for part of email\n    query = select(Customer).where(Customer.email.like(f\"%{email}%\"))\n    customer = db.session.execute(query).scalars().first()\n    return customer_schema.jsonify(customer), 200",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "CustomerSchema",
        "kind": 6,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "class CustomerSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Customer\n        include_relationships = True\ncustomer_schema = CustomerSchema()\ncustomers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customer_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customer_schema = CustomerSchema()\ncustomers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customers_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customers_schema = CustomerSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "login_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def login_mechanic():\n    try:\n        creds = login_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(Mechanic).where(Mechanic.email == creds[\"email\"])\n    mechanic = db.session.execute(query).scalars().first()\n    if mechanic and check_password_hash(mechanic.password, creds[\"password\"]):\n        # grant  and return a token\n        token = encode_token(mechanic.id, role='mechanic')",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "create_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def create_mechanic():\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(Mechanic).where(Mechanic.email == mechanic_data[\"email\"])\n    mechanic = db.session.execute(query).scalars().first()\n    if mechanic:\n        return jsonify({\"error\": \"Email already taken\"}), 400\n    mechanic_data['password'] = generate_password_hash(mechanic_data['password'])",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanics():\n    try:\n        page = int(request.args.get('page'))\n        per_page = int(request.args.get('per_page'))\n        query = select(Mechanic)\n        mechanics = db.paginate(query, page=page, per_page=per_page)\n        return mechanics_schema.jsonify(mechanics), 200\n    except:\n        query = select(Mechanic)\n    mechanics = db.session.execute(query).scalars().all()",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if mechanic:\n        return mechanic_schema.jsonify(mechanic), 200\n    return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n# Update a mechanic\n@mechanics_bp.route('/<int:mechanic_id>', methods=['PUT'])\n@limiter.limit(\"5/hour\")\n@token_required\ndef update_mechanic(mechanic_id):",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "update_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def update_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # Check if the email already exists for another mechanic\n    query = select(Mechanic).where(Mechanic.email == mechanic_data[\"email\"])",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "delete_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def delete_mechanic(mechanic_id):\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Invalid mechanic ID\"}), 400\n    db.session.delete(mechanic)\n    db.session.commit()\n    return jsonify({\"message\": \"mechanic deleted successfully\"}), 200",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "MechanicSchema",
        "kind": 6,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "class MechanicSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanic\n        include_relationships = True\nmechanic_schema = MechanicSchema()\nmechanics_schema = MechanicSchema(many=True)\nlogin_schema = MechanicSchema(exclude=['name', 'salary'])",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanic_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanic_schema = MechanicSchema()\nmechanics_schema = MechanicSchema(many=True)\nlogin_schema = MechanicSchema(exclude=['name', 'salary'])",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanics_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanics_schema = MechanicSchema(many=True)\nlogin_schema = MechanicSchema(exclude=['name', 'salary'])",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "login_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "login_schema = MechanicSchema(exclude=['name', 'salary'])",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "create_part_description",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def create_part_description():\n    try:\n        part_description_data = part_description_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    new_part_description = PartDescription(**part_description_data)\n    db.session.add(new_part_description)\n    db.session.commit()\n    return part_description_schema.jsonify(new_part_description), 201  # successfully created\n# Get all part_descriptions",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "get_part_descriptions",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def get_part_descriptions():\n    try:\n        page = int(request.args.get('page'))\n        per_page = int(request.args.get('per_page'))\n        query = select(PartDescription)\n        part_descriptions = db.paginate(query, page=page, per_page=per_page)\n        return part_descriptions_schema.jsonify(part_descriptions), 200\n    except:\n        query = select(PartDescription)\n    part_descriptions = db.session.execute(query).scalars().all()",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "get_part_description",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def get_part_description(part_description_id):\n    part_description = db.session.get(PartDescription, part_description_id)\n    if part_description:\n        return part_description_schema.jsonify(part_description), 200\n    return jsonify({\"error\": \"Invalid part_description ID\"}), 400\n# Update a part_description\n@part_descriptions_bp.route('/<int:part_description_id>', methods=['PUT'])\n@limiter.limit(\"5/hour\")\ndef update_part_description(part_description_id):\n    part_description = db.session.get(PartDescription, part_description_id)",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "update_part_description",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def update_part_description(part_description_id):\n    part_description = db.session.get(PartDescription, part_description_id)\n    if not part_description:\n        return jsonify({\"error\": \"Invalid part_description ID\"}), 400\n    try:\n        part_description_data = part_description_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    for fields, value in part_description_data.items():\n        setattr(part_description, fields, value)",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "delete_part_description",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def delete_part_description(part_description_id):\n    part_description = db.session.get(PartDescription, part_description_id)\n    if not part_description:\n        return jsonify({\"error\": \"Invalid part_description ID\"}), 400\n    db.session.delete(part_description)\n    db.session.commit()\n    return jsonify({\"message\": \"part_description deleted successfully\"}), 200\n# Path query to find most valuable part_description\n@part_descriptions_bp.route('/most-valuable', methods=['GET'])\ndef get_most_valuable():",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "get_most_valuable",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def get_most_valuable():\n    # return list of part_descriptions with the most service tickets\n    query = select(PartDescription)\n    part_descriptions = db.session.execute(query).scalars().all()\n    part_descriptions.sort(key=lambda part_description: len(part_description.tickets),reverse=True)\n    return part_descriptions_schema.jsonify(part_descriptions), 200  \n# Query parameter to search part_description by email\n@part_descriptions_bp.route('/search', methods=['GET'])\ndef search_by_part_name():\n    name = request.args.get('name')",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "search_by_part_name",
        "kind": 2,
        "importPath": "app.blueprints.part_descriptions.routes",
        "description": "app.blueprints.part_descriptions.routes",
        "peekOfCode": "def search_by_part_name():\n    name = request.args.get('name')\n    #* search for exact email\n    # query = select(part_description).where(part_description.email == email)\n    #* search for part of email\n    query = select(part_description).where(part_description.part_name.like(f\"%{name}%\"))\n    part_description = db.session.execute(query).scalars().first()\n    return part_description_schema.jsonify(part_description), 200",
        "detail": "app.blueprints.part_descriptions.routes",
        "documentation": {}
    },
    {
        "label": "PartDescriptionSchema",
        "kind": 6,
        "importPath": "app.blueprints.part_descriptions.schemas",
        "description": "app.blueprints.part_descriptions.schemas",
        "peekOfCode": "class PartDescriptionSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = PartDescription\n        include_relationships = True\npart_description_schema = PartDescriptionSchema()\npart_descriptions_schema = PartDescriptionSchema(many=True)",
        "detail": "app.blueprints.part_descriptions.schemas",
        "documentation": {}
    },
    {
        "label": "part_description_schema",
        "kind": 5,
        "importPath": "app.blueprints.part_descriptions.schemas",
        "description": "app.blueprints.part_descriptions.schemas",
        "peekOfCode": "part_description_schema = PartDescriptionSchema()\npart_descriptions_schema = PartDescriptionSchema(many=True)",
        "detail": "app.blueprints.part_descriptions.schemas",
        "documentation": {}
    },
    {
        "label": "part_descriptions_schema",
        "kind": 5,
        "importPath": "app.blueprints.part_descriptions.schemas",
        "description": "app.blueprints.part_descriptions.schemas",
        "peekOfCode": "part_descriptions_schema = PartDescriptionSchema(many=True)",
        "detail": "app.blueprints.part_descriptions.schemas",
        "documentation": {}
    },
    {
        "label": "create_serialized_part",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def create_serialized_part():\n    try:\n        serialized_part_data = serialized_part_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    new_serialized_part = SerializedPart(**serialized_part_data)\n    db.session.add(new_serialized_part)\n    db.session.commit()\n    return jsonify({\n        \"message\": f\"Added new {new_serialized_part.description.brand} {new_serialized_part.description.part_name} to database\",",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "get_serialized_parts",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def get_serialized_parts():\n    try:\n        page = int(request.args.get('page'))\n        per_page = int(request.args.get('per_page'))\n        query = select(SerializedPart)\n        serialized_parts = db.paginate(query, page=page, per_page=per_page)\n        return serialized_parts_schema.jsonify(serialized_parts), 200\n    except:\n        query = select(SerializedPart)\n    serialized_parts = db.session.execute(query).scalars().all()",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "get_serialized_part",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def get_serialized_part(serialized_part_id):\n    serialized_part = db.session.get(SerializedPart, serialized_part_id)\n    if serialized_part:\n        return serialized_part_schema.jsonify(serialized_part), 200\n    return jsonify({\"error\": \"Invalid serialized_part ID\"}), 400\n# Update a serialized_part\n@serialized_parts_bp.route('/<int:serialized_part_id>', methods=['PUT'])\n@limiter.limit(\"5/hour\")\ndef update_serialized_part(serialized_part_id):\n    serialized_part = db.session.get(SerializedPart, serialized_part_id)",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "update_serialized_part",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def update_serialized_part(serialized_part_id):\n    serialized_part = db.session.get(SerializedPart, serialized_part_id)\n    if not serialized_part:\n        return jsonify({\"error\": \"Invalid serialized_part ID\"}), 400\n    try:\n        serialized_part_data = serialized_part_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    for fields, value in serialized_part_data.items():\n        setattr(serialized_part, fields, value)",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "delete_serialized_part",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def delete_serialized_part(serialized_part_id):\n    serialized_part = db.session.get(SerializedPart, serialized_part_id)\n    if not serialized_part:\n        return jsonify({\"error\": \"Invalid serialized_part ID\"}), 400\n    db.session.delete(serialized_part)\n    db.session.commit()\n    return jsonify({\"message\": \"serialized_part deleted successfully\"}), 200\n# Path query to find most valuable serialized_part\n@serialized_parts_bp.route('/most-valuable', methods=['GET'])\ndef get_most_valuable():",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "get_most_valuable",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def get_most_valuable():\n    # return list of serialized_parts with the most service tickets\n    query = select(SerializedPart)\n    serialized_parts = db.session.execute(query).scalars().all()\n    serialized_parts.sort(key=lambda serialized_part: len(serialized_part.tickets),reverse=True)\n    return serialized_parts_schema.jsonify(serialized_parts), 200  \n# Find on hand amount of part by description ID\n@serialized_parts_bp.route(\"/stock/<int:description_id>\", methods=[\"GET\"])\ndef get_individual_stock(description_id):\n    part_description = db.session.get(PartDescription, description_id)",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "get_individual_stock",
        "kind": 2,
        "importPath": "app.blueprints.serialized_parts.routes",
        "description": "app.blueprints.serialized_parts.routes",
        "peekOfCode": "def get_individual_stock(description_id):\n    part_description = db.session.get(PartDescription, description_id)\n    parts = part_description.serialized_parts\n    count = 0\n    for part in parts:\n        if not part.ticket_id:\n            count += 1\n    return jsonify(\n        {\"item\": part_description.part_name,\n        \"quantity\": count",
        "detail": "app.blueprints.serialized_parts.routes",
        "documentation": {}
    },
    {
        "label": "SerializedPartSchema",
        "kind": 6,
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "peekOfCode": "class SerializedPartSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = SerializedPart\n        include_fk = True\nserialized_part_schema = SerializedPartSchema()\nserialized_parts_schema = SerializedPartSchema(many=True)",
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_part_schema",
        "kind": 5,
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "peekOfCode": "serialized_part_schema = SerializedPartSchema()\nserialized_parts_schema = SerializedPartSchema(many=True)",
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "serialized_parts_schema",
        "kind": 5,
        "importPath": "app.blueprints.serialized_parts.schemas",
        "description": "app.blueprints.serialized_parts.schemas",
        "peekOfCode": "serialized_parts_schema = SerializedPartSchema(many=True)",
        "detail": "app.blueprints.serialized_parts.schemas",
        "documentation": {}
    },
    {
        "label": "create_ServiceTicket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def create_ServiceTicket():\n    try:\n        service_ticket_data = service_ticket_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    customer = db.session.get(Customer, service_ticket_data[\"customer_id\"])\n    new_service_ticket = ServiceTicket(**service_ticket_data)\n    db.session.add(new_service_ticket)\n    db.session.commit()\n    return service_ticket_schema.jsonify(",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_service_tickets",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def get_service_tickets():\n    try:\n        page = int(request.args.get(\"page\"))\n        per_page = int(request.args.get(\"per_page\"))\n        query = select(ServiceTicket)\n        service_tickets = db.paginate(query, page=page, per_page=per_page)\n        return service_tickets_schema.jsonify(service_tickets), 200\n    except:\n        query = select(ServiceTicket)\n    service_tickets = db.session.execute(query).scalars().all()",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def get_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if service_ticket:\n        return service_ticket_schema.jsonify(service_ticket), 200\n    return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n# Add a mechanic to a service_ticket\n@service_tickets_bp.route(\"/<int:service_ticket_id>/add-mechanic/<int:mechanic_id>\", methods=[\"PUT\"])\n@limiter.limit(\"25/hour\")\n@admin_required\ndef add_mechanic(service_ticket_id, mechanic_id):",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def add_mechanic(service_ticket_id, mechanic_id):\n    ticket = db.session.get(ServiceTicket, service_ticket_id)\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if ticket and mechanic:\n        if mechanic not in ticket.mechanics:\n            ticket.mechanics.append(mechanic)\n            db.session.commit()\n            return jsonify(\n                {\n                    \"message\": f\"Successfully added mechanic {mechanic.name} to service ticket {service_ticket_id}\",",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "remove_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def remove_mechanic(service_ticket_id, mechanic_id):\n    ticket = db.session.get(ServiceTicket, service_ticket_id)\n    mechanic = db.session.get(Mechanic, mechanic_id)\n    if ticket and mechanic:\n        if mechanic in ticket.mechanics:\n            ticket.mechanics.remove(mechanic)\n            db.session.commit()\n            return jsonify(\n                {\n                    \"message\": f\"successfully removed {mechanic.name} from the ticket\",",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "update_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def update_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if not service_ticket:\n        return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n    try:\n        service_ticket_data = service_ticket_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    query = select(ServiceTicket).where(\n        (ServiceTicket.VIN == service_ticket_data[\"VIN\"])",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "delete_service_ticket",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def delete_service_ticket(service_ticket_id):\n    service_ticket = db.session.get(ServiceTicket, service_ticket_id)\n    if not service_ticket:\n        return jsonify({\"error\": \"Invalid service_ticket ID\"}), 400\n    db.session.delete(service_ticket)\n    db.session.commit()\n    return jsonify({\"message\": \"service_ticket deleted successfully\"}), 200\n# Add a part to a service_ticket\n@service_tickets_bp.route(\"/<int:ticket_id>/add-part/<int:part_id>\", methods=[\"PUT\"])\ndef add_part(ticket_id, part_id):",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_part",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def add_part(ticket_id, part_id):\n    ticket = db.session.get(ServiceTicket, ticket_id)\n    part = db.session.get(SerializedPart, part_id)\n    if ticket and part:\n        if not part.ticket_id:\n            ticket.serialized_parts.append(part)\n            db.session.commit()\n            return jsonify(\n                {\n                    \"message\": f\"successfully added part to the ticket\",",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "remove_part",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def remove_part(ticket_id, part_id):\n    ticket = db.session.get(ServiceTicket, ticket_id)\n    part = db.session.get(SerializedPart, part_id)\n    if ticket and part:\n        if not part.ticket_id:\n            ticket.serialized_parts.remove(part)\n            db.session.commit()\n            return jsonify(\n                {\n                    \"message\": f\"successfully removed part from the ticket\",",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "app.blueprints.service_tickets.routes",
        "description": "app.blueprints.service_tickets.routes",
        "peekOfCode": "def add_to_cart(ticket_id, description_id):\n    ticket = db.session.get(ServiceTicket, ticket_id)\n    description = db.session.get(PartDescription, description)\n    parts = description.serialized_parts\n    for part in parts:\n        if not part.ticket_id:\n            ticket.serializd_parts.append(part)\n            return jsonify(\n                {\n                    \"message\": f\"successfully added part to the ticket\",",
        "detail": "app.blueprints.service_tickets.routes",
        "documentation": {}
    },
    {
        "label": "ServiceTicketSchema",
        "kind": 6,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "class ServiceTicketSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ServiceTicket\n        include_fk = True\nservice_ticket_schema = ServiceTicketSchema()\nservice_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "service_ticket_schema",
        "kind": 5,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "service_ticket_schema = ServiceTicketSchema()\nservice_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "service_tickets_schema",
        "kind": 5,
        "importPath": "app.blueprints.service_tickets.schemas",
        "description": "app.blueprints.service_tickets.schemas",
        "peekOfCode": "service_tickets_schema = ServiceTicketSchema(many=True)",
        "detail": "app.blueprints.service_tickets.schemas",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "kind": 2,
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "peekOfCode": "def encode_token(user_id, role='user'):\n    payload = {\n        'exp': datetime.now(timezone.utc) + timedelta(days=1), # expiration time set to 1 day\n        'iat': datetime.now(timezone.utc), # issuad at time\n        'sub': str(user_id), #* user_id must be string in order to decode properly\n        'role': role  #* role can be 'user' or 'mechanic'\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n    return token\ndef token_required(f):",
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "token_required",
        "kind": 2,
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "peekOfCode": "def token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = None\n        # Check if token is passed in the headers\n        if 'Authorization' in request.headers:\n            # headers dictionary in rewuests, authorization key\n            token = request.headers['Authorization'].split()[1]\n        if not token:\n            return jsonify({'error': 'Token is missing!'}), 401",
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "peekOfCode": "def admin_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = None\n        # Check if token is passed in the headers\n        if 'Authorization' in request.headers:\n            # headers dictionary in rewuests, authorization key\n            token = request.headers['Authorization'].split()[1]\n        if not token:\n            return jsonify({'error': 'Token is missing!'}), 401",
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.util.auth",
        "description": "app.util.auth",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY') or \"super secret secrets\"\ndef encode_token(user_id, role='user'):\n    payload = {\n        'exp': datetime.now(timezone.utc) + timedelta(days=1), # expiration time set to 1 day\n        'iat': datetime.now(timezone.utc), # issuad at time\n        'sub': str(user_id), #* user_id must be string in order to decode properly\n        'role': role  #* role can be 'user' or 'mechanic'\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n    return token",
        "detail": "app.util.auth",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "ma = Marshmallow()\nlimiter = Limiter(\n    get_remote_address,\n    default_limits=['200 per day', '75 per hour'] # Default rate limits\n)\ncache = Cache()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(\n    get_remote_address,\n    default_limits=['200 per day', '75 per hour'] # Default rate limits\n)\ncache = Cache()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "cache = Cache()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\ndb = SQLAlchemy(model_class=Base)\nservice_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Customer(Base):\n    __tablename__ = \"customers\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(320), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(16), nullable=False)\n    tickets: Mapped[List[\"ServiceTicket\"]] = db.relationship(back_populates=\"customer\", cascade=\"all, delete-orphan\", passive_deletes=True)\nclass Mechanic(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanic",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Mechanic(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(320), nullable=False, unique=True)\n    salary: Mapped[float] = mapped_column(db.Float(), nullable=False)\n    password: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    tickets: Mapped[List[\"ServiceTicket\"]] = db.relationship(secondary=service_mechanic, back_populates=\"mechanics\")\nclass ServiceTicket(Base):\n    __tablename__ = \"service_tickets\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ServiceTicket",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ServiceTicket(Base):\n    __tablename__ = \"service_tickets\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    service_date: Mapped[date]\n    VIN: Mapped[str] = mapped_column(db.String(17), nullable=False)\n    service_desc: Mapped[str] = mapped_column(db.String(500), nullable=False)\n    customer_id: Mapped[int] = mapped_column(db.ForeignKey(\"customers.id\"), nullable=False)\n    customer: Mapped[\"Customer\"] = db.relationship(back_populates=\"tickets\")\n    mechanics: Mapped[List[\"Mechanic\"]] = db.relationship(secondary=service_mechanic, back_populates=\"tickets\")\n    serialized_parts: Mapped[List[\"SerializedPart\"]] = db.relationship(back_populates=\"ticket\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PartDescription",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class PartDescription(Base):\n    __tablename__ = \"part_descriptions\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    part_name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    brand: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    price: Mapped[float] = mapped_column(db.Float(), nullable=False)\n    serialized_parts: Mapped[List[\"SerializedPart\"]] = db.relationship(back_populates=\"description\")\nclass SerializedPart(Base):\n    __tablename__ = \"serialized_parts\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "SerializedPart",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class SerializedPart(Base):\n    __tablename__ = \"serialized_parts\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    desc_id: Mapped[int] = mapped_column(db.ForeignKey(\"part_descriptions.id\"), nullable=False)\n    ticket_id: Mapped[int] = mapped_column(db.ForeignKey(\"service_tickets.id\"), nullable=True)\n    description: Mapped[\"PartDescription\"] = db.relationship(back_populates=\"serialized_parts\")\n    ticket: Mapped[\"ServiceTicket\"] = db.relationship(back_populates=\"serialized_parts\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "db = SQLAlchemy(model_class=Base)\nservice_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------\nclass Customer(Base):\n    __tablename__ = \"customers\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "service_mechanic",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "service_mechanic = db.Table(\n    \"service_mechanic\",\n    Base.metadata,\n    db.Column(\"ticket_id\", db.ForeignKey(\"service_tickets.id\")),\n    db.Column(\"mechanic_id\", db.ForeignKey(\"mechanics.id\")),\n)\n# * ---------- Models ----------\nclass Customer(Base):\n    __tablename__ = \"customers\"\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TestCustomer",
        "kind": 6,
        "importPath": "tests.test_customers",
        "description": "tests.test_customers",
        "peekOfCode": "class TestCustomer(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('TestingConfig')\n        self.customer = Customer(\n            name='test',\n            email='test@testing.com',\n            phone='123-456-7890'\n        )\n        # self.customer = Customer(name='test', email='test@test.com', phone='123-456-7890')\n        with self.app.app_context():",
        "detail": "tests.test_customers",
        "documentation": {}
    },
    {
        "label": "TestMechanic",
        "kind": 6,
        "importPath": "tests.test_mechanics",
        "description": "tests.test_mechanics",
        "peekOfCode": "class TestMechanic(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('TestingConfig')\n        self.mechanic = Mechanic(\n            name='test',\n            email='test@test.com',\n            salary=50000,\n            password=generate_password_hash('123')\n        )\n        with self.app.app_context():",
        "detail": "tests.test_mechanics",
        "documentation": {}
    },
    {
        "label": "Test_part_description",
        "kind": 6,
        "importPath": "tests.test_part_descriptions",
        "description": "tests.test_part_descriptions",
        "peekOfCode": "class Test_part_description(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('TestingConfig')\n        self.part_description = PartDescription(\n            part_name=\"test_part\",\n            brand=\"test_brand\",\n            price=99.99\n        )\n        with self.app.app_context():\n            db.drop_all()",
        "detail": "tests.test_part_descriptions",
        "documentation": {}
    },
    {
        "label": "TestSerializedPart",
        "kind": 6,
        "importPath": "tests.test_serialized_parts",
        "description": "tests.test_serialized_parts",
        "peekOfCode": "class TestSerializedPart(unittest.TestCase):  # Fixed class name convention\n    def setUp(self):\n        self.app = create_app('TestingConfig')\n        self.client = self.app.test_client()\n        with self.app.app_context():\n            db.drop_all()\n            db.create_all()\n            # Create customer \n            self.customer = Customer(\n                name=\"Test Customer\",",
        "detail": "tests.test_serialized_parts",
        "documentation": {}
    },
    {
        "label": "TestServiceTickets",
        "kind": 6,
        "importPath": "tests.test_service_tickets",
        "description": "tests.test_service_tickets",
        "peekOfCode": "class TestServiceTickets(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('TestingConfig')\n        self.client = self.app.test_client()\n        with self.app.app_context():\n            db.drop_all()\n            db.create_all()        \n            self.customer = Customer(\n                name='test',\n                email='test_customer@testme.com',",
        "detail": "tests.test_service_tickets",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = create_app('DevelopmentConfig')\nwith app.app_context():\n    # db.drop_all()\n    db.create_all()\nif __name__ == '__main__':\n    app.run()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig:\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///mechanic_shop.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = True\n    CACHE_TYPE = 'SimpleCache'  \n    CACHE_DEFAULT_TIMEOUT = '300'  # 5 minutes\nclass TestingConfig:\n   SQLALCHEMY_DATABASE_URI = 'sqlite:///testing.db'\n   debug = True \n   CACHE_TYPE = 'SimpleCache'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class TestingConfig:\n   SQLALCHEMY_DATABASE_URI = 'sqlite:///testing.db'\n   debug = True \n   CACHE_TYPE = 'SimpleCache'\nclass ProductionConfig:\n    SQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI') or 'sqlite:///mechanic_shop.db'\n    CACHE_TYPE = 'SimpleCache'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ProductionConfig:\n    SQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI') or 'sqlite:///mechanic_shop.db'\n    CACHE_TYPE = 'SimpleCache'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def index():\n    return redirect('/api/docs')\nwith app.app_context():\n    # db.drop_all()\n    db.create_all()",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app('ProductionConfig')\n@app.route('/', methods=['GET'])\ndef index():\n    return redirect('/api/docs')\nwith app.app_context():\n    # db.drop_all()\n    db.create_all()",
        "detail": "run",
        "documentation": {}
    }
]