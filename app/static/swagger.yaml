swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "This is documentation for a Mechanic Shop API customer tracking system."
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
paths:
#* Mechanics Paths
  /mechanics/login:
    post:
      tags:
        - "Mechanics"
      summary: "Login a mechanic (generate a token)"
      description: "Post login credentials including email and password, and receive a token if successful"
      parameters:
        - in: body
          name: body
          description: "Login credentials for the mechanic"
          required: true
          schema: 
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            type: object
            properties:
              token:
                type: string
          examples:
            application/json:
              token: "eyJhbGciOiJIUzI1NiIsI..."

  /mechanics:
    post:
      tags:
        - "Mechanics"
      summary: "Create a new mechanic"
      description: "Send JSON payload including mechanic details to create a new mechanic in database"
      parameters:
        - in: body
          name: body
          description: "Information of mechanic to be created"
          required: true
          schema: 
            $ref: "#/definitions/MechanicPayload" 
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/MechanicResponse" 
          examples:  
            application/json:
              email: "test@test.com"
              id: 1
              name: "Test Testly"
              password: "pass"
              salary: 50000
              tickets: []

    get:
        tags:
          - "Mechanics"
        summary: "Get all mechanics"
        description: "Endpoint to return all mechanics"
        responses:
          200:
            description: "Successfully retrieved mechanics"
            schema:
              $ref: "#/definitions/MechanicListResponse"

  /mechanics/{mechanic_id}:
    get:
      tags:
        - "Mechanics"
      summary: "Get a mechanic by ID"
      parameters:
        - in: path
          name: mechanic_id
          type: integer
          required: true
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MechanicResponse"

    put:
      tags:
        - "Mechanics"
      summary: "Update a mechanic (requires authentication)"
      description: "Update an existing mechanic's information requires mechanic to be logged in"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: mechanic_id
          type: integer
          required: true
          description: "ID of the mechanic to update"
        - in: body
          name: body
          description: "Information used update a mechanic"
          required: true
          schema: 
            $ref: "#/definitions/MechanicPayload" 
      responses:
        200: 
          description: "Successful Update"
          schema:
            $ref: "#/definitions/MechanicResponse"

    delete:
      tags: 
        - "Mechanics"
      summary: "Delete a mechanic (requires authentication)"
      description: "Delete a mechanic from the database requires mechanic to be logged in"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: mechanic_id
          type: integer
          required: true
      responses:
        200:
          description: "Mechanic deleted successfully"
    
#* Customers paths
  /customers:
    post:
      tags:
        - "Customers"
      summary: "Create a new Customer"
      description: "Send JSON payload including customer details to create a new customer in database"
      parameters:
        - in: body
          name: body
          description: "Information of customer to be created"
          required: true
          schema: 
            $ref: "#/definitions/CustomerPayload" 
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse" 
          examples:  
            application/json:
              email: "test@testing.com"
              id: 1
              name: "Test Customer"
              phone: "123-456-7890"
              tickets: []
    get:
      tags:
          - "Customers"
      summary: "Get all customers"
      description: "Endpoint to return all customers"
      responses:
        200:
          description: "Successfully retrieved customers"
          schema:
            $ref: "#/definitions/CustomerListResponse"    
  /customers/{customer_id}:
    get:
      tags:
        - "Customers"
      summary: "Get a customer by ID"
      parameters:
        - in: path
          name: customer_id
          type: integer
          required: true
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CustomerResponse"

    put:
      tags:
        - "Customers"
      summary: "Update a customer (requires authentication)"
      description: "Update an existing customer's information requires mechanic to be logged in"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: customer_id
          type: integer
          required: true
          description: "ID of the customer to update"
        - in: body
          name: body
          description: "Information used update a customer"
          required: true
          schema: 
            $ref: "#/definitions/CustomerPayload" 
      responses:
        200:  
          description: "Successful Update"
          schema:
            $ref: "#/definitions/CustomerResponse"

    delete:
      tags: 
        - "Customers"
      summary: "Delete a customer (requires authentication)"
      description: "Delete a customer from the database requires mechanic to be logged in"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: customer_id
          type: integer
          required: true
      responses:
        200:
          description: "Customer deleted successfully"

definitions:
#* Mechanics definitions

  MechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      salary:
        type: integer

  MechanicResponse:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      salary:
        type: integer
      tickets:  
        type: array
        items:
          type: integer

  MechanicListResponse:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        password:
          type: string
        salary:
          type: integer
        tickets:  
          type: array
          items:
            type: integer

#* Customers definitions
  CustomerPayload:
    type: object
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string

  CustomerResponse:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      tickets:
        type: array
        items:
          type: integer

  CustomerListResponse:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
        tickets:  
          type: array
          items:
            type: integer